面向对象：
    是一种编程思想，每个的角度不一样，理解也不一样（因为每个人的角度不同，看待同一个问题的结果就不同）
属性一定是在某个(非空) 对象上的。  null（空对象）   只有(非空)对象上才能加属性  [] {}
构造函数 ：
    这个函数专门拿来构造一个对象的
工厂函数：
    有原材料，有加工，有出厂的函数



new : 运算符
    专门运算函数的。
			
    用了new之后函数可以不用加括号就调用,new运算之后的()主要是为传参用的。
		
    new之后偷偷的在函数内容创建了一个空白的对象
		
    new之后函数的默认返回值就为new出来的这个对象。
		
    return之后如果后面跟着为对象类型也包括函数，那么返回值就为return后面的值
    否则就返回new出来的对象。

原型：
prototype
    给某个类定义一个class
			
    .a{
        background:red
    }
			
    class="a"
		
    fn1.prototype = {}
		
    当一个函数被申明的时候，该函数下默认有一个属性：prototype，
    （该属性的值是一个**对象**）当我们去调用一个对象的属性或者方法的时候，如果该对象自身没有该属性或方法，则会调用到该对象的构造函数下的prototype下面属性或方法.
    prototype是给这个类的实例化对象使用的。（自身用不了）; 
__proto__  原型链    对象有原型链 (对象与构造函数原型的桥梁)
		
函数有原型
    对象没有原型只有链
						     
    碰到对象找原型链，碰到函数找原型（始终要遵循,原型只给这个类的实例化对象用）
    先找Teacher身上有没有say ，如果没有那么 去找 Teacher身上的原型链，等同于找
    Function的原型 ，如果还没有  Function的原型的原型链 ，等同于找Object的原型有就执行，没有就报错。

---------------------------------------------------

如果是对象，那么会先找链 -> 构造函数的原型 ->  构造函数的原型的链 -> 对象的原型
		
如果是找函数：
    那么会先找链（因为函数的原型是给这个函数的实例化对象使用的）
			
构造函数的原型
    1.这个函数就是Function -> Function.prototype -> Function.prototype.__proto__ -> Object.prototype
				
    2.Array.__proto__ -> Function.prototype -> Function.prototype.__proto__ -> Object.prototype


面向对象的好处
		1、代码的层次结构更清晰
		2、更容易复用
		3、更容易维护
		4、更容易扩展
		5、more...
包装对象：
		
str.length  -> new String()  ->  length -> 2个 -> str
			
    当简单类型去查看某个属性或者方法的时候，系统会偷偷地将这个简单类型转成对象类型的对象，从这个对象去查找要查看的结果，之后这个包装对象自动销毁这个被销毁的对象为包装对象，整个过程就是简单类型也能查看（调用）某个属性或者方法的原理。
			
    简单类型的属性只能读，不能写。str.length = 1 (这样是设置不了的)
		
		
什么是包装对象
    当使用原始类型的值（string、number、boolean），在调用对应属性和方法的时候，内部会自动转成对应的对象。隐式创建的这个对象，就成为包装对象
内置的对象
	String、Number、Boolean
	  
包装对象的特点
    隐式创建对象后，可以调用对应的属性和方法，使用后，立马销毁，所以不能给原始类型的值添加属性和方法

就算内置对象，也不能随意去修改属性 ，只能读。

hasOwnProperty：
     查看某个属性是不是这个对象自身的。
			
     注意：***自身，一定是在当前这个对象中（不会沿着原型链查找属性，只查找自身属性
			
     boolean object.hasOwnProperty(prop);

因为简单类型的赋值就是赋值
   简单类型的赋值是不会影响另一个数据
   而对象类型的赋值是赋址
   对象类型赋值都是引用一个内存地址，所以说，改变arr2，同样会改变arr

解决：
   通过循环，将对象中每个简单类型赋值给另一个对象，就不会出现引用关系。
		
arr = [1,2,3]  //?
		
arr2 = [1,2,3]  //?
String  -> 字符串
Array  ->  数组
		Object ->  对象
		Number ->  数字